[{"/home/marcos/Documents/projects/backtracking-visualizer/src/index.js":"1","/home/marcos/Documents/projects/backtracking-visualizer/src/sudoku-solver/sudoku-solver.js":"2","/home/marcos/Documents/projects/backtracking-visualizer/src/sudoku-solver/Solver.js":"3","/home/marcos/Documents/projects/backtracking-visualizer/src/eight-queens/solver.js":"4","/home/marcos/Documents/projects/backtracking-visualizer/src/eight-queens/eight-queens.js":"5"},{"size":2061,"mtime":1607930016976,"results":"6","hashOfConfig":"7"},{"size":9480,"mtime":1607929921341,"results":"8","hashOfConfig":"7"},{"size":3100,"mtime":1607825139771,"results":"9","hashOfConfig":"7"},{"size":3374,"mtime":1607926778206,"results":"10","hashOfConfig":"7"},{"size":8726,"mtime":1607929155858,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a5gucl",{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},"/home/marcos/Documents/projects/backtracking-visualizer/src/index.js",[],"/home/marcos/Documents/projects/backtracking-visualizer/src/sudoku-solver/sudoku-solver.js",["25","26","27"],"/home/marcos/Documents/projects/backtracking-visualizer/src/sudoku-solver/Solver.js",["28"],"\nexport default class Solver{\n\n    constructor(){   \n        this.setup = [\n            [ 0, 6, 0, 1, 0, 4, 0, 5, 0, 0, 0, 8, 3, 0, 5, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 4, 0, 7, 0, 0, 6, 0, 0, 6, 0, 0, 0, 3, 0, 0, 7, 0, 0, 9, 0, 1, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 2, 0, 6, 9, 0, 0, 0, 4, 0, 5, 0, 8, 0, 7, 0],\n            [ 0, 1, 7, 3, 0, 9, 0, 0, 2, 0, 9, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 0, 0, 6, 8, 0, 4, 0, 7, 3, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 9, 0, 3, 0, 0, 1, 0, 8, 6, 4, 0],\n            [ 0, 0, 0, 0, 0, 2, 5, 1, 4, 0, 9, 2, 0, 4, 0, 0, 8, 0, 0, 6, 0, 7, 0, 0, 3, 0, 0, 0, 0, 6, 0, 0, 9, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 8, 6, 0, 7, 0, 0, 6, 0, 3, 0, 0, 7, 0, 5, 1, 7, 8, 0, 0, 0, 0, 4, 3, 0, 5, 0, 0, 0, 0, 0, 9, 0, 0],\n            [ 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 0, 3, 7, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 9, 3, 0, 0, 3, 2, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 5, 0, 0, 0, 4, 1, 0, 0, 4, 1, 0, 0, 0, 3, 9, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0]\n        ];\n\n        this.grid = [0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8]\n    }\n\n    generateRandom(){\n        return Math.floor(Math.random() * this.setup.length);\n    }\n\n    getRandomSetUp(){\n        return this.setup[this.generateRandom()];\n    }\n\n    getCols(setp){\n        var ans = [];\n\n        for(let i = 0; i < 9; i++){\n            var aux = Array(10).fill(false);\n            for(let j = 0; j < 9; j++){\n                let n = setp[i + j*9]; // maybe delete this \"-1\"\n                // let n = 0;\n                if(n !== \"\" && n !== 0){\n                    aux[n]= true;\n                }else{\n                    aux[n]= false;\n                }\n            }\n            ans.push(aux);\n        }\n        console.log(\"abui\");\n        console.log(ans);   \n        return ans;\n    }\n\n    getRows(setp){\n        var ans = [];\n\n        for(let i = 0; i < 9; i++){\n            var aux = Array(10).fill(false);\n            for(let j = 0; j < 9; j++){\n                let n = setp[i*9 + j];\n                if(n !== \"\" && n !== 0){\n                    aux[n]= true;\n                }else{\n                    aux[n]= false;\n                }\n            }\n            ans.push(aux);\n        }\n\n        console.log(\"aqui\");\n        console.log(ans);\n        return ans;\n    }   \n\n    belongsTo(n){\n        return this.grid[n];\n    }\n\n    getGrid(setp){\n\n        var aux = [];\n        for(let i = 0; i < 9; i++)\n            aux.push(Array(10).fill(false));\n        var ct = 0;\n        for(let i = 0; i < 9; i++){\n            for(let j = 0; j < 9; j++){\n                let n = setp[i*9 + j];\n                if(n !== \"\" && n !== 0){\n                    ct++;\n                    aux[this.grid[i*9 + j]][n] = true;\n                }\n            }\n        }\n\n        return (aux);\n    }\n}",["29","30"],"/home/marcos/Documents/projects/backtracking-visualizer/src/eight-queens/solver.js",[],"/home/marcos/Documents/projects/backtracking-visualizer/src/eight-queens/eight-queens.js",["31","32","33"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './eight-queens.css';\nimport './../common.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChessQueen } from '@fortawesome/free-solid-svg-icons'\nimport { faChessBoard } from '@fortawesome/free-solid-svg-icons'\nimport Solver from './solver.js';\n\n\nfunction SquarePredefined(props){\n    let cssProperties = \"square-chess predefined \"+props.color;\n    return (\n        // <span className={cssProperties}\n        // ><FontAwesomeIcon icon={faChessQueen} />\n        // </span>\n\n        <button className={cssProperties}\n        ><FontAwesomeIcon icon={faChessQueen}/>\n        </button>\n    )\n}\n\nfunction Square(props){\n    let cssProperties = \"square-chess \"+props.color;\n    if(props.hasQueen){\n        return (\n            <button className={cssProperties}      \n                onClick={props.onClick}\n            >\n                <FontAwesomeIcon icon={faChessQueen}/>\n            </button>\n        )\n    }else{\n        return (\n            <button className={cssProperties}      \n                onClick={props.onClick}\n            ></button>\n        )\n    }\n}\n\nfunction DelayInput(props) {\n    return (\n        <div className=\"speed\">\n            <input \n            type=\"number\"\n            value={props.value}\n            className=\"delay-input\"\n            onChange={e => props.onChange(e.target.value)}\n            />\n            <span className=\"description\">\n                Intervalo entre ações em ms\n            </span>\n        </div>\n    )\n}\n\nclass EightQueens extends React.Component{\n    constructor(props){\n        super(props);\n        let slv = new Solver();\n        let boardTemp = slv.getRandomBoard();\n        console.log(boardTemp);\n        let markTemp = boardTemp.map(x => x.map( y => y === 0? false: true));//this.getMark(boardTemp);\n        console.log(\"aqui\")\n        console.log(markTemp);\n        this.state = {\n            board : boardTemp,\n            solver: slv,\n            mark: markTemp,\n            rows: slv.getRows(boardTemp),\n            cols: slv.getCols(boardTemp), \n            steps: [],\n            index: 0,\n            isAvailable: true,\n        }\n    }\n\n    getMark(board){\n        let arr = Array(8).fill(Array(8));\n        console.log(arr);\n        for(let i = 0; i < 8; i++){\n            for(let j = 0; j < 8; j++){\n                if(board[i][j] === 1){\n                    arr[i][j] = 1;\n                }else{\n                    arr[i][j] = 0;\n                }\n            }\n        }\n        return arr;\n    }\n\n    renderSquare(color, i, j,  h){\n        return <Square  onClick={ () => this.handleSquareClick(i,j)} hasQueen={h} color={color}></Square>\n    }\n\n    renderSquarePredefined(color){\n        return <SquarePredefined   color={color}></SquarePredefined>\n    }\n\n    handleSquareClick(row, col){\n        console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n        let boardTemp = this.state.board;\n        if(this.state.mark[row][col]){\n            console.log(\"nnnn\");\n            return;\n        }\n        console.log(boardTemp[row][col]);\n        if(boardTemp[row][col] !== 1 && (this.state.rows[row] || this.state.cols[col] || this.state.solver.getDiagonals(this.state.board, row, col))){\n            console.log(\"abc\");\n            return; \n        }\n        console.log(\"agh\");\n        if(boardTemp[row][col] === 1){\n            console.log(\"aaaaaaaa\");\n            boardTemp[row][col] = 0;\n        }else{\n            console.log(\"abd\")\n            boardTemp[row][col] = 1;\n            // boardtemp\n        }\n        console.log(row, col);\n        // console.log()\n\n        this.setState({board: boardTemp}); // add mark on setState\n    }\n\n\n    colorPick(i){\n        let a = Math.floor(i/8);\n        if(a % 2 === 0){\n            if(i%2 === 0)\n                return \"white\";\n            else \n                return \"black\"\n        }\n        else{\n            if(i%2 === 1)\n                return \"white\";\n            else \n                return \"black\" \n        }\n    }\n\n    getBoard(){\n        let board = [];\n        let row = [];\n\n        for(let i = 0; i < 8; i++){\n            for(let j = 0; j < 8; j++){\n                let color = this.colorPick(i*8 + j);\n                if(this.state.mark[i][j])\n                    row.push(this.renderSquarePredefined(color));\n                else if(this.state.board[i][j] === 1){\n                    console.log(\"aqui\");\n                    row.push(this.renderSquare(color + \" filled\", i, j, true));\n                }else\n                    row.push(this.renderSquare(color, i, j, false));\n            }\n            board.push(<div className=\"row\">{row}</div>);\n            row = [];\n        }\n\n        return board;\n    }\n\n    mark(row, col){\n        let boardtemp = this.state.board;\n        let rowTemp = this.state.rows;\n        let colTemp = this.state.cols;\n        rowTemp[row] = true;\n        colTemp[col] = true;\n        boardtemp[row][col] = 1;\n        this.setState({rows: rowTemp, cols: colTemp, board: boardtemp});\n    }\n\n    unmark(row, col){\n        let boardtemp = this.state.board;\n        let rowTemp = this.state.rows;\n        let colTemp = this.state.cols;\n        rowTemp[row] = false;\n        colTemp[col] = false;\n        boardtemp[row][col] = 0;\n        this.setState({rows: rowTemp, cols: colTemp, board: boardtemp});\n    }\n\n    recordStep(row, col, vle){\n        if(this.state.steps.length < 100000){\n            let temp = this.state.steps;\n            temp.push({\"row\": row, \"col\":col, \"value\":vle});\n            this.setState({steps: temp});\n        }\n    }\n\n    solve(row){\n        // console.log(row);\n        if(row === 8){\n            console.log(\"oia so\")\n            return true;\n        }\n        \n        if(this.state.rows[row]){\n            if(this.solve(row + 1)){\n                return true;\n            }\n            return false;\n        }\n        \n        for(let i = 0; i < 8; i++){\n            if(!this.state.solver.getDiagonals(this.state.board, row, i) && !this.state.cols[i]){\n                this.mark(row, i);\n                this.recordStep(row, i, 1);\n                if(this.solve(row + 1))\n                    return true;\n                this.unmark(row, i);\n                this.recordStep(row, i, 0);\n            }\n        }\n\n        return false;\n    }\n\n    displaySolution(){\n        let ind = this.state.index;\n        if(ind === this.state.steps.length){\n            clearInterval(this.state.interval);\n            this.setState({isAvailable: true});\n            return;\n        }\n\n        let boardtemp = this.state.board;\n        let x = this.state.steps[ind];\n        boardtemp[x.row][x.col] = x.value;\n        this.setState({board: boardtemp, index: ind + 1});\n    }\n\n\n    resetBoard(){\n        let boardtemp = this.state.board;\n        console.log(this.state.mark);\n        for(let i = 0; i < 8; i++){\n            // let rw = [];\n            for(let j = 0; j < 8; j++){\n                if(this.state.mark[i][j]){ // go back to board if yout scre it\n                    boardtemp[i][j] = 1;\n                }else \n                    boardtemp[i][j] = 0;\n            }\n            // boardtemp.push(rw);\n        }\n        console.log(\"boardtemp\")\n        console.log(boardtemp);\n        this.setState({board: boardtemp,index: 0, isAvailable: false});\n        console.log(this.state.board);\n    }\n\n    solveAndDisplay(){\n        this.resetBoard();\n        if(this.solve(0)){\n            console.log(\"oioi\");\n            this.resetBoard();\n\n            clearInterval(this.state.interval);\n            this.state.interval = setInterval( () => {this.displaySolution()}, 200);\n        }else{\n            console.log(\"Não possui solução\")\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"game\">\n                <div className=\"board\">\n                    {this.getBoard()}\n                    <div className=\"form-div\">\n                    <button className=\"btn get-random-table\" >Tabuleiro aleatório</button>\n                    <button className=\"btn custom-board\" >Crie seu tabuleiro</button>\n                    <DelayInput value={this.state.delayTime} className=\"delay-input\" onChange={(a) => this.handleDelayChange(a)}></DelayInput>\n                    <button className=\"btn solve-button\" onClick={() => this.solveAndDisplay()}>Gerar Solução</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default EightQueens;\n\n// ReactDOM.render(\n//     <div>\n//         <div className=\"header\"><FontAwesomeIcon icon={faChessBoard} /></div>\n//         <div className=\"page\"><Board></Board></div>\n//     </div>,\n//     document.getElementById('root')\n// );",{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":64,"column":9,"nodeType":"40","endLine":64,"endColumn":13},{"ruleId":"38","severity":1,"message":"39","line":207,"column":9,"nodeType":"41","endLine":207,"endColumn":19},{"ruleId":"34","severity":1,"message":"42","line":79,"column":21,"nodeType":"36","messageId":"37","endLine":79,"endColumn":23},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":16},{"ruleId":"34","severity":1,"message":"47","line":7,"column":10,"nodeType":"36","messageId":"37","endLine":7,"endColumn":22},{"ruleId":"38","severity":1,"message":"39","line":266,"column":13,"nodeType":"41","endLine":266,"endColumn":23},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","MemberExpression","'ct' is assigned a value but never used.","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"'faChessBoard' is defined but never used.","no-global-assign","no-unsafe-negation"]